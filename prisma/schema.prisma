generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

model Problem {
  qID          Int    @id @default(autoincrement())
  title        String
  description  String
  inputFormat  String
  outputFormat String
  constraints  String

  sampleInput  String
  sampleOutput String
  explanation  String

  sampleCode  String
  difficulty  Difficulty
  defaultCode String

  timeLimit   Float
  memoryLimit Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions Submission[]
  posts       Post[]
  testCases   TestCase[]
}

model TestCase {
  id        Int      @id @default(autoincrement())
  stdin     String
  stdout    String
  problemId Int
  problem   Problem  @relation(fields: [problemId], references: [qID])
  createdAt DateTime @default(now())
}

model Submission {
  id        String   @id @default(cuid())
  code      String
  language  Int
  verdict   String
  runtime   Float
  memory    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [qID])
  problemId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model User {
  id          String       @id @default(cuid())
  name        String?
  email       String       @unique
  username    String       @unique
  firebaseUid String       @unique
  admin       Boolean      @default(false)
  avatar      String?      @default("https://i.imgur.com/6VBx3io.png")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  submissions Submission[]
  posts       Post[]
  votes       Vote[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem? @relation(fields: [problemId], references: [qID])
  problemId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  parent    Post?    @relation("PostToPost", fields: [parentId], references: [id])
  parentId  String?
  children  Post[]   @relation("PostToPost")
  votes     Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
